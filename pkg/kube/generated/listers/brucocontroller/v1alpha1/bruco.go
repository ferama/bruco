// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ferama/bruco/pkg/kube/apis/brucocontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BrucoLister helps list Brucos.
// All objects returned here must be treated as read-only.
type BrucoLister interface {
	// List lists all Brucos in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Bruco, err error)
	// Brucos returns an object that can list and get Brucos.
	Brucos(namespace string) BrucoNamespaceLister
	BrucoListerExpansion
}

// brucoLister implements the BrucoLister interface.
type brucoLister struct {
	indexer cache.Indexer
}

// NewBrucoLister returns a new BrucoLister.
func NewBrucoLister(indexer cache.Indexer) BrucoLister {
	return &brucoLister{indexer: indexer}
}

// List lists all Brucos in the indexer.
func (s *brucoLister) List(selector labels.Selector) (ret []*v1alpha1.Bruco, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Bruco))
	})
	return ret, err
}

// Brucos returns an object that can list and get Brucos.
func (s *brucoLister) Brucos(namespace string) BrucoNamespaceLister {
	return brucoNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BrucoNamespaceLister helps list and get Brucos.
// All objects returned here must be treated as read-only.
type BrucoNamespaceLister interface {
	// List lists all Brucos in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Bruco, err error)
	// Get retrieves the Bruco from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Bruco, error)
	BrucoNamespaceListerExpansion
}

// brucoNamespaceLister implements the BrucoNamespaceLister
// interface.
type brucoNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Brucos in the indexer for a given namespace.
func (s brucoNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Bruco, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Bruco))
	})
	return ret, err
}

// Get retrieves the Bruco from the indexer for a given namespace and name.
func (s brucoNamespaceLister) Get(name string) (*v1alpha1.Bruco, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bruco"), name)
	}
	return obj.(*v1alpha1.Bruco), nil
}
